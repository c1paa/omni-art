#include <AccelStepper.h>
#include <TMCStepper.h>

#include <SPI.h>
#include <SD.h>
#define CS_PIN 17  // –ü–∏–Ω Chip Select (CS)

#include <Servo.h>

#include <Adafruit_GFX.h>
#include <Adafruit_GrayOLED.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

#include <Wire.h>
#include <Adafruit_SSD1306.h>
Adafruit_SSD1306 display(128, 32, &Wire, -1);
#define ENC_SW 3
#define ENC_DT 15
#define ENC_CLK 14

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ—Ç–æ—Ä–æ–≤
#define STEP_PIN_1 6
#define DIR_PIN_1 7
#define STEP_PIN_2 12
#define DIR_PIN_2 13
#define STEP_PIN_3 11
#define DIR_PIN_3 10
#define TMC_RX 5
#define TMC_TX 4
#define DRIVER_ADDRESS 0b00
#define R_SENSE 0.11f  
uint16_t speed = 5;
uint16_t MICROSTEPS = 16;
uint32_t ACCELERATION = 20000;
uint32_t MAXSPEED = 1000;
uint8_t TOFF = 5; // –∑–∞–¥–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 0-15
uint16_t RMC_DEFAULT = 800;// –º–∞–∫—Å —Ç–æ–∫ –º–ê
float HOLD_I = 0.5; // —Ç–æ–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è - –¥–æ–ª—è RMC_DEFAULT 0.0-1.0 
uint8_t SEUP = 2; // —à–∞–≥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ç–æ–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ 0-3
uint8_t SEDN = 1; // —à–∞–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ç–æ–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ 0-3
bool SPREAD_CYCLE = false;  // true - —Ç–æ—á–Ω—ã–π —à—É–º–Ω—ã–π(pread_cycle); false - —Ç–∏—Ö–∏–π, –Ω—ã –≤—ã—Å–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–µ —Å—Ç–∞–±–∏–ª–µ–Ω(stealthchop)
uint8_t STALLGUARD = 150;  // 0-255 —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ spead_cycle)
uint8_t PWM_FREQ = 0; // —á–∞—Å—Ç–æ—Ç–∞ —à–∏–º 0 - 35–∫–ì—Ü; 1 - 2.5–∫–ì—Ü; 2 - 39–∫–ì—Ü; 3 - 100–∫–ì—Ü
bool AUTO_PWN = true;  // –ø–ª–∞–Ω–æ–≤—Å—Ç—å —à–∏–º
uint8_t PWM_GRAD = 10; // –≥—Ä–∞–¥–∏–µ–Ω—Ç —à–∏–º –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç—å 0-255
bool PWM_AUTOGRAD = true; // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ —à–∏–º
uint8_t PWM_OFS = 30; // —Å–º–µ—â–µ–Ω–∏–µ —à–∏–º 
uint16_t STEALTHCHOP_OFF = 200; // —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º —à–∞–≥/—Å (–µ—Å–ª–∏ SPREAD_CYCLE true)
uint16_t COOLSTEP = 0; // —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è coolstep (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ–∫–∞)
uint8_t HIGH_TEMP = 100; // –ø–æ—Ä–æ–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–æ–∫–∞ 0-255
bool FILTER_STEP = false; // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–µ–ø —Å–∏–≥–∞–Ω–∞–ª–∞ true/false

// SerialUART tmcSerial(4, 5); 
TMC2209Stepper driver(&Serial2, R_SENSE, DRIVER_ADDRESS);
// TMC2209Stepper driver(TMC_RX, TMC_TX, R_SENSE, DRIVER_ADDRESS); // RX 5 TX 4
AccelStepper motor1(AccelStepper::DRIVER, STEP_PIN_1, DIR_PIN_1);
AccelStepper motor2(AccelStepper::DRIVER, STEP_PIN_2, DIR_PIN_2);
AccelStepper motor3(AccelStepper::DRIVER, STEP_PIN_3, DIR_PIN_3);

void driverInit() {
  Serial2.setTX(4);
  Serial2.setRX(5);
  Serial2.begin(115200);
  while(!Serial2){}
  driver.begin();
  driver.toff(TOFF);
  driver.hold_multiplier(HOLD_I);
  driver.SGTHRS(STALLGUARD);
  driver.TCOOLTHRS(COOLSTEP);
  driver.TPWMTHRS(STEALTHCHOP_OFF);
  driver.pwm_freq(PWM_FREQ);
  driver.seup(SEUP);
  driver.sedn(SEDN);
  driver.pwm_grad(PWM_GRAD);
  driver.pwm_ofs(PWM_OFS);
  driver.pwm_autograd(PWM_AUTOGRAD);
  driver.rms_current(RMC_DEFAULT);
  driver.microsteps(MICROSTEPS);
  driver.pwm_autoscale(AUTO_PWN); 
  driver.en_spreadCycle(SPREAD_CYCLE); 

  Serial.println("tmc uart succses");
  Serial.print("GCONF: 0x"); Serial.println(driver.GCONF(), HEX);
  Serial.print("IOIN: 0x"); Serial.println(driver.IOIN(), HEX);
  Serial.print("CURRENT: "); Serial.println(driver.rms_current());
}

#include <math.h>

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç –º–æ—Ç–æ—Ä–æ–≤ (—à–∞–≥–æ–≤/—Å–µ–∫)
class MotorFreq {
public:
  float motor1;
  float motor2;
  float motor3;
  MotorFreq(){}
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–æ–±–æ—Ç–∞
const float WHEEL_RADIUS = 0.029f;  // –†–∞–¥–∏—É—Å –∫–æ–ª–µ—Å–∞ (–º–µ—Ç—Ä—ã)
const float ROBOT_RADIUS = 0.1055f; // 84.5+8+13

const float COS_120 = -0.5f;           // cos(120¬∞)
const float SIN_120 = 0.86602540378f;   // sin(120¬∞)



float updateMotors(float direction_deg, float speed_mps = 0.5, float rotation_radps = 0) {
  float dir_rad = direction_deg * M_PI / 180.0f;
  float vx = speed_mps * cos(dir_rad);
  float vy = speed_mps * sin(dir_rad);
  float wz = rotation_radps;

  MotorFreq freq;
  freq.motor1 = ( -vx * 0.0f    + vy * 1.0f    + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 1 (90¬∞)
  freq.motor2 = ( -vx * SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 2 (210¬∞)
  freq.motor3 = ( -vx * -SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 3 (330¬∞)

  motor1.setSpeed(freq.motor1*speed*MICROSTEPS);  
  motor2.setSpeed(freq.motor2*speed*MICROSTEPS);
  motor3.setSpeed(freq.motor3*speed*MICROSTEPS);
  return max(freq.motor1*speed, max(freq.motor2*speed, freq.motor3*speed));
  // Serial.print(freq.motor1);
  // Serial.print(" - ");
  // Serial.print(freq.motor2);
  // Serial.print(" - ");
  // Serial.println(freq.motor3);
}

void hardResetStepper(AccelStepper &stepper) {
  stepper.setCurrentPosition(0);
    
    // 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  stepper.moveTo(0);
  // stepper.run();
  stepper.runToPosition(); 
    // // stepper.stop();
    // stepper.setCurrentPosition(0);
    // // stepper.moveTo(0);  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º —Ü–µ–ª—å
    // stepper.runToPosition();  // –î–æ–∂–∏–º–∞–µ–º –¥–æ –Ω—É–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // // stepper.disableOutputs();  // –û—Ç–∫–ª—é—á–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ (–µ—Å–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    // delay(100);  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ "—É—Å–ø–æ–∫–æ–µ–Ω–∏–µ" –¥—Ä–∞–π–≤–µ—Ä–∞
    // // stepper.enableOutputs();  // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
}

// int laststep1, laststep2, laststep3;

void driveto(float direction_deg, float distance, float speed_mps = 0.5, float rotation_radps = 0, bool delayneed = true, bool stopneed = true) {
  // uint64_t st = millis();
  // while (updateMotors(direction_deg, speed_mps, rotation_radps)*(millis()-st)/1000.0 < distance){
  //   motor1.runSpeed(); j
  //   motor2.runSpeed();
  //   motor3.runSpeed();
  // }
  // motor1.stop();
  // motor2.stop();
  // motor3.stop();
  float dir_rad = direction_deg * M_PI / 180.0f;
  float vx = speed_mps * cos(dir_rad);
  float vy = speed_mps * sin(dir_rad);
  float wz = rotation_radps;

  MotorFreq freq;
  MotorFreq dis;

  freq.motor1 = ( -vx * 0.0f    + vy * 1.0f    + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 1 (90¬∞)
  freq.motor2 = ( -vx * SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 2 (210¬∞)
  freq.motor3 = ( -vx * -SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) / WHEEL_RADIUS;  // –ö–æ–ª–µ—Å–æ 3 (330¬∞)

  motor1.setMaxSpeed(freq.motor1*speed*MICROSTEPS);  
  motor2.setMaxSpeed(freq.motor2*speed*MICROSTEPS);
  motor3.setMaxSpeed(freq.motor3*speed*MICROSTEPS);

  motor1.setAcceleration(freq.motor1*30000*WHEEL_RADIUS);  
  motor2.setAcceleration(freq.motor2*30000*WHEEL_RADIUS);
  motor3.setAcceleration(freq.motor3*30000*WHEEL_RADIUS);

  dis.motor1 = ( -vx * 0.0f    + vy * 1.0f    + wz * ROBOT_RADIUS ) * distance;  // –ö–æ–ª–µ—Å–æ 1 (90¬∞)
  dis.motor2 = ( -vx * SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) * distance;  // –ö–æ–ª–µ—Å–æ 2 (210¬∞)
  dis.motor3 = ( -vx * -SIN_120 + vy * COS_120 + wz * ROBOT_RADIUS ) * distance;  // –ö–æ–ª–µ—Å–æ 3 (330¬∞)

  motor1.setCurrentPosition(0);
  motor2.setCurrentPosition(0);
  motor3.setCurrentPosition(0);

  motor1.moveTo(dis.motor1*speed*MICROSTEPS);  
  motor2.moveTo(dis.motor2*speed*MICROSTEPS);
  motor3.moveTo(dis.motor3*speed*MICROSTEPS);

  Serial.print(dis.motor1);
  Serial.print(" ");
  Serial.print(dis.motor2);
  Serial.print(" ");
  Serial.println(dis.motor3);
  // laststep1 = dis.motor1*speed*MICROSTEPS;
  // laststep2 = dis.motor2*speed*MICROSTEPS;
  // laststep3 = dis.motor3*speed*MICROSTEPS;
  while (!(motor1.distanceToGo() == 0 && motor2.distanceToGo() == 0 && motor3.distanceToGo() == 0)) {
    motor1.run();
    motor2.run();
    motor3.run();
  }

  // motor1.runToPosition();
  // motor2.runToPosition();
  // motor3.runToPosition();
  if (stopneed){
    motor1.stop();
    motor2.stop();
    motor3.stop();
  }
  if (delayneed) delay(200);

  

  // motor1.runToPosition();
  // motor2.runToPosition();
  // motor3.runToPosition();

  // hardResetStepper(motor1);
  // hardResetStepper(motor2);
  // hardResetStepper(motor3);
  
}




// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è G-–∫–æ–¥–∞
void readAndExecuteGCode(const char* filename) {
  File file = SD.open(filename);
  
  if (!file) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞!");
    return;
  }

  Serial.println("üîé –ß—Ç–µ–Ω–∏–µ G-–∫–æ–¥–∞...");

  while (file.available()) {
    String line = file.readStringUntil('\n');
    line.trim();  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ \r\n
    
    if (line.startsWith("G1")) {  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (G1 X Y)
      processG1Command(line);    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
    }
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ G-–∫–æ–¥—ã (G0, G28 –∏ —Ç.–¥.)
  }

  file.close();
  Serial.println("‚úÖ G-–∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
}

// –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ G1 X Y –∏ –≤—ã–∑–æ–≤ driveTo(—É–≥–æ–ª, –¥–ª–∏–Ω–∞)
void processG1Command(String gcodeLine) {
  float x = 0, y = 0;
  
  // –ò—â–µ–º X –∏ Y –≤ —Å—Ç—Ä–æ–∫–µ (–ø—Ä–∏–º–µ—Ä: "G1 X10.5 Y20.3")
  int xPos = gcodeLine.indexOf('X');
  int yPos = gcodeLine.indexOf('Y');
  
  if (xPos != -1) {
    x = gcodeLine.substring(xPos + 1).toFloat();
  }
  if (yPos != -1) {
    y = gcodeLine.substring(yPos + 1).toFloat();
  }

  Serial.print("üîÑ G1 –ö–æ–º–∞–Ω–¥–∞: X=");
  Serial.print(x);
  Serial.print(", Y=");
  Serial.println(y);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º X,Y –≤ —É–≥–æ–ª –∏ –¥–ª–∏–Ω—É
  float angle = atan2(y, x) * 180 / PI;  // –£–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (0-360)
  float distance = sqrt(x * x + y * y);  // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞)

  Serial.print("‚û°Ô∏è driveTo: –£–≥–æ–ª=");
  Serial.print(angle);
  Serial.print("¬∞, –î–ª–∏–Ω–∞=");
  Serial.println(distance);

  driveTo(angle, distance);  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
}




Servo serv;

void setup() {
  Serial.begin(115200);
  // while(!Serial){}
  pinMode(ENC_SW, INPUT);
  pinMode(ENC_DT, INPUT);
  pinMode(ENC_CLK, INPUT);
  Wire.setSDA(8);  // GP2 –Ω–∞ Pico
  Wire.setSCL(9);  // GP3 –Ω–∞ Pico
  Wire.begin();
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    while (1){}
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  // display.setCursor(0, 0);
  // display.println("OLED");
  // display.display();
  // Serial.println("print");
  // delay(1000);
  // Serial.println("print2");
  // display.clearDisplay();
  // display.display();

  display.setCursor(20, 20);
  display.println("program1");
  display.drawFastHLine(10, 30, 108, 1);
  display.display();
  Serial.println("print3");
  

  
  delay(500);
  if (!SD.begin(CS_PIN)) {
    Serial.println("‚ùå SD-–∫–∞—Ä—Ç–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞!");
    // return;
  } else {
    Serial.println("‚úÖ SD-–∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞!");
  }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ
  File root = SD.open("/");
  if (!root) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏!");
    // return;
    while (1){}
  }
  // delay(2000); 
  // while (!Serial){}
  // Serial.println("serial monitor succses");
  pinMode(STEP_PIN_1, OUTPUT);
  pinMode(DIR_PIN_1, OUTPUT);
  pinMode(STEP_PIN_2, OUTPUT);
  pinMode(DIR_PIN_2, OUTPUT);
  pinMode(STEP_PIN_3, OUTPUT);
  pinMode(DIR_PIN_3, OUTPUT);
  pinMode(TMC_TX, OUTPUT);
  pinMode(TMC_RX, INPUT);
  pinMode(20, OUTPUT);
  serv.attach(20);
  serv.write(90);
  driverInit();

  delay(500);
  
  motor1.setMaxSpeed(MAXSPEED*MICROSTEPS);
  motor1.setAcceleration(ACCELERATION*MICROSTEPS);
  // motor1.setSpeed(200*MICROSTEPS);
  motor2.setMaxSpeed(MAXSPEED*MICROSTEPS);
  motor2.setAcceleration(ACCELERATION*MICROSTEPS);
  // motor2.setSpeed(200*MICROSTEPS);
  motor3.setMaxSpeed(MAXSPEED*MICROSTEPS);
  motor3.setAcceleration(ACCELERATION*MICROSTEPS);
  // motor3.setSpeed(200*MICROSTEPS);

  readAndExecuteGCode("gcode.txt");
}
int num = 0;
void enc() {
    if (digitalRead(ENC_CLK) == 0 && digitalRead(ENC_DT) == 1){
      num++;
      while (!(digitalRead(ENC_CLK) == 1 && digitalRead(ENC_DT) == 1)){}
    } else if (digitalRead(ENC_CLK) == 1 && digitalRead(ENC_DT) == 0){
      num--;
      while (!(digitalRead(ENC_CLK) == 1 && digitalRead(ENC_DT) == 1)){}
    } 
}

bool working = false;
int tasknum = 0;

void drawCircle(float radius, int num_segments = 50) {
    const float angle_step = 2 * M_PI / num_segments;  // –£–≥–ª–æ–≤–æ–π —à–∞–≥ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
    
    for (int i = 0; i < num_segments; i++) {
        float angle = i * angle_step;  // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
        float step_length = 2 * radius * sin(angle_step / 2);  // –î–ª–∏–Ω–∞ —à–∞–≥–∞
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        float angle_deg = angle * 180.0 / M_PI;
        driveto(angle_deg, step_length, 0.5f, 0, false, false);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        delay(4);
    }
}

void drawSpiral(float outer_radius, float inner_radius, int num_loops = 5, int steps_per_loop = 50) {
    float total_steps = num_loops * steps_per_loop;
    float radius_step = (outer_radius - inner_radius) / total_steps;
    float angle_step = 2 * M_PI / steps_per_loop;  // –£–≥–ª–æ–≤–æ–π —à–∞–≥ –∑–∞ –æ–¥–∏–Ω –≤–∏—Ç–æ–∫
    
    float current_radius = outer_radius;
    
    for (int i = 0; i < total_steps; i++) {
        float theta = i * angle_step;  // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª
        float step_length = 2 * current_radius * sin(angle_step / 2);  // –î–ª–∏–Ω–∞ —à–∞–≥–∞
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        float angle_deg = theta * 180.0 / M_PI;
        driveto(angle_deg, step_length, 0.5f, 0, false, false);
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å
        current_radius -= radius_step;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        delay(4);
    }
}

void drawEllipse(float a, float b, int segments = 400) {
    float angle_step = 2 * M_PI / segments;
    
    for (int i = 0; i <= segments; i++) {
        float theta = i * angle_step;
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ —ç–ª–ª–∏–ø—Å–µ
        float x = a * cos(theta);
        float y = b * sin(theta);
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏
        float next_theta = (i + 1) * angle_step;
        float next_x = a * cos(next_theta);
        float next_y = b * sin(next_theta);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
        float dx = next_x - x;
        float dy = next_y - y;
        
        // –î–ª–∏–Ω–∞ —à–∞–≥–∞
        float step_length = sqrt(dx*dx + dy*dy);
        
        // –£–≥–æ–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
        float angle_deg = atan2(dy, dx) * 180.0 / M_PI;
        if (angle_deg < 0) angle_deg += 360;
        
        // –î–≤–∏–≥–∞–µ–º—Å—è
        driveto(angle_deg, step_length, 0.5f, 0, false, false);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delay(10);
    }
}

void drawHumanLikeStar(float size) {
    // –£–≥–ª—ã –¥–ª—è 5-–∫–æ–Ω–µ—á–Ω–æ–π –∑–≤–µ–∑–¥—ã (—à–∞–≥ 144¬∞)
    float star_angles[] = {0, 144, 288, 72, 216}; 
    
    for (int i = 0; i < 5; i++) {  // 6 —à–∞–≥–æ–≤ (5 –ª–∏–Ω–∏–π + –∑–∞–º—ã–∫–∞–Ω–∏–µ)
        float angle_deg = star_angles[i];
        driveto(angle_deg, size);
        delay(100);  // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    }
}

void loop() {
  
}